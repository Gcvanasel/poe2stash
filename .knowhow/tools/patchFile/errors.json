[
  {
    "originalPatch": "Index: ./src/App.tsx\n===================================================================\n--- ./src/App.tsx\n+++ ./src/App.tsx\n@@ -1,35 +1,11 @@\n-import { useState } from 'react'\n-import reactLogo from './assets/react.svg'\n-import viteLogo from '/electron-vite.animate.svg'\n+import React from 'react'\n+import MainPage from './components/MainPage'\n import './App.css'\n \n-function App() {\n-  const [count, setCount] = useState(0)\n-\n+const App: React.FC = () => {\n   return (\n-    <>\n-      <div>\n-        <a href=\"https://electron-vite.github.io\" target=\"_blank\">\n-          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n-        </a>\n-        <a href=\"https://react.dev\" target=\"_blank\">\n-          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n-        </a>\n-      </div>\n-      <h1>Vite + React</h1>\n-      <div className=\"card\">\n-        <button onClick={() => setCount((count) => count + 1)}>\n-          count is {count}\n-        </button>\n-        <p>\n-          Edit <code>src/App.tsx</code> and save to test HMR\n-        </p>\n-      </div>\n-      <p className=\"read-the-docs\">\n-        Click on the Vite and React logos to learn more\n-      </p>\n-    </>\n+    <MainPage />\n   )\n }\n \n-export default App\n+export default App",
    "fixedPatch": "@@ -1,35 +1,11 @@\n-import reactLogo from './assets/react.svg'\n+import React from 'react'\n+import MainPage from './components/MainPage'\n import './App.css'\n \n-function App() {\n+const App: React.FC = () => {\n   return (\n-      <div>\n-          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\n-        <a href=\"https://react.dev\" target=\"_blank\">\n-        </a>\n-      <h1>Vite + React</h1>\n-        <button onClick={() => setCount((count) => count + 1)}>\n-        </button>\n-          Edit <code>src/App.tsx</code> and save to test HMR\n-      </div>\n-        Click on the Vite and React logos to learn more\n-    </>\n+    <MainPage />\n   )\n }\n \n+export default App\n",
    "fileContent": "import { useState } from 'react'\r\nimport reactLogo from './assets/react.svg'\r\nimport viteLogo from '/electron-vite.animate.svg'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0)\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <a href=\"https://electron-vite.github.io\" target=\"_blank\">\r\n          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\r\n        </a>\r\n        <a href=\"https://react.dev\" target=\"_blank\">\r\n          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\r\n        </a>\r\n      </div>\r\n      <h1>Vite + React</h1>\r\n      <div className=\"card\">\r\n        <button onClick={() => setCount((count) => count + 1)}>\r\n          count is {count}\r\n        </button>\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to test HMR\r\n        </p>\r\n      </div>\r\n      <p className=\"read-the-docs\">\r\n        Click on the Vite and React logos to learn more\r\n      </p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n"
  },
  {
    "originalPatch": "Index: ./src/services/poe2trade.tsx\n===================================================================\n--- ./src/services/poe2trade.tsx\n+++ ./src/services/poe2trade.tsx\n@@ -30,13 +30,46 @@\n     return response.data as Poe2FetchItems;\n   }\n \n+  private getCacheKey(itemId: string): string {\n+    return `poe2trade_item_${itemId}`;\n+  }\n+\n+  private cacheStore(item: Poe2Item): void {\n+    const cacheKey = this.getCacheKey(item.id);\n+    localStorage.setItem(cacheKey, JSON.stringify(item));\n+  }\n+\n+  private cacheFetch(itemId: string): Poe2Item | null {\n+    const cacheKey = this.getCacheKey(itemId);\n+    const cachedItem = localStorage.getItem(cacheKey);\n+    return cachedItem ? JSON.parse(cachedItem) : null;\n+  }\n+\n   async fetchAllItems(query: string, items: string[]) {\n-    const allItems = [];\n+    const allItems: Poe2Item[] = [];\n+    const itemsToFetch: string[] = [];\n+\n+    // Check cache first\n+    for (const itemId of items) {\n+      const cachedItem = this.cacheFetch(itemId);\n+      if (cachedItem) {\n+        allItems.push(cachedItem);\n+      } else {\n+        itemsToFetch.push(itemId);\n+      }\n+    }\n+\n+    items = itemsToFetch;\n+\n     while (items.length) {\n       const response = await this.fetchItems(query, items);\n       await wait(1000);\n+      \n+      // Store fetched items in cache\n+      response.result.forEach(item => this.cacheStore(item));\n+      \n       allItems.push(...response.result);\n-      items = items.slice(10);\n+      items = items.slice(10);\n     }\n     return allItems;\n   }",
    "fixedPatch": "",
    "fileContent": "import axios from \"axios\";\nimport { Poe2TradeSearch, Poe2FetchItems, Poe2Item } from \"./types\";\nimport { wait } from \"../utils/wait\";\n\nclass Poe2TradeService {\n  port = 7555;\n  baseUrl = `http://localhost:${this.port}`;\n  tradeUrl = \"pathofexile.com/api/trade2\";\n  apiUrl = `${this.baseUrl}/proxy/${this.tradeUrl}`;\n\n  async getAccountItems(account: string, price = 1) {\n    const url = `${this.apiUrl}/search/poe2/Standard`;\n    console.log(\"Requesting\", url);\n    const response = await axios.post(url, {\n      query: {\n        filters: {\n          trade_filters: {\n            filters: { account: { input: account }, price: { min: price } },\n          },\n        },\n      },\n      sort: { price: \"asc\" },\n    });\n    return response.data as Poe2TradeSearch;\n  }\n\n  async fetchItems(query: string, items: string[]) {\n    const response = await axios.get(\n      `${this.apiUrl}/fetch/${items.slice(0, 10).join(\",\")}?query=${query}&realm=poe2`,\n    );\n    return response.data as Poe2FetchItems;\n  }\n\n  async fetchAllItems(query: string, items: string[]) {\n    const allItems: Poe2Item[] = [];\n    const itemsToFetch: string[] = [];\n\n    // Check cache first\n    for (const itemId of items) {\n      const cachedItem = this.cacheFetch(itemId);\n      if (cachedItem) {\n        allItems.push(cachedItem);\n      } else {\n        itemsToFetch.push(itemId);\n      }\n    }\n\n    items = itemsToFetch;\n\n    while (items.length) {\n      const response = await this.fetchItems(query, items);\n      await wait(1000);\n      \n      // Store fetched items in cache\n      response.result.forEach(item => this.cacheStore(item));\n      \n      allItems.push(...response.result);\n      items = items.slice(10);\n    }\n    return allItems;\n  }\n\n  getStashTabs(items: Poe2Item[]) {\n    const stashTabs = items.reduce(\n      (acc, item) => {\n        const { stash } = item.listing;\n        if (acc[stash.name]) {\n          acc[stash.name].push(item);\n        } else {\n          acc[stash.name] = [item];\n        }\n        return acc;\n      },\n      {} as Record<string, Poe2Item[]>,\n    );\n    return stashTabs;\n  }\n}\n\nexport const Poe2Trade = new Poe2TradeService();\n"
  }
]